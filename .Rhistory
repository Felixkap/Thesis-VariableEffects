num.trees = num.trees,
keep.inbag = T,
oob.error = T,
mtry = mtry,
max.depth = max.depth,
importance = 'permutation',
min.node.size = node_size)
# Linear Model
linreg <- lm( formula = fietskans ~ .^2,
data = data)
summary(linreg)
# Random Forest
all_tree_predictions <- predict(rf, x, predict.all = T)$predictions
predictions.rf <- rowMeans(all_tree_predictions)
# Linear Model
predictions.lm <- predict(linreg,
newdata = data,
se.fit = T)$fit
n <- nrow(data)
cat("RMSE on train data of Linear Model:", sqrt(mean((data$fietskans - predictions.lm)^2)),
". RMSE on train data of Random Forest:", sqrt(mean((data$fietskans - predictions.rf)^2)),
".\nR^2 of Linear Model:", 1 - mean((data$fietskans - predictions.lm)^2) / ((n-1) / (n) * var(data$fietskans)),
". R^2 of Random Forest:", 1 - mean((data$fietskans - predictions.rf)^2) / ((n-1) / (n) * var(data$fietskans)),
".\nOOB estimate of RF for generalization error:", sqrt(rf$prediction.error), ".")
# Add optional Arguments: thinning, first_tree
par(mfrow=c(2,1))
plot_error_rate(rf, data, outcome='fietskans', data_type='train')
plot_error_rate(rf, data, outcome='fietskans', data_type='oob')
par(mfrow=c(1,2))
plot_error_rate(rf, data, outcome='fietskans', data_type='train')
plot_error_rate(rf, data, outcome='fietskans', data_type='oob')
point_of_interest <- calculate_mean_mode(x)
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode', # Default <=> calculate_mean_mode(x)
k = k,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=100))
# Summary output of variable main and low-order interaction effects
result$summary
source('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Helper_Workflow.R')
par(mfrow=c(1,2))
plot_error_rate(rf, data, outcome='fietskans', data_type='train')
plot_error_rate(rf, data, outcome='fietskans', data_type='oob')
par(mfrow=c(1,2))
plot_error_rate(rf, data, outcome='fietskans', data_type='train', thinning=200)
plot_error_rate(rf, data, outcome='fietskans', data_type='oob', thinning=200)
result
rm(list=ls())
library(ranger)
source('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Helper_Workflow.R')
seed <- 12391
set.seed(seed)
data <- read.csv('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Apply_Workflow_To_Data/fietsdata.csv', )
data <- char_to_fac(data)
x <- data %>% select(-fietskans)
head(data)
sd(x$km)
range(x$km)
rm(list=ls())
library(ranger)
source('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Helper_Workflow.R')
seed <- 12391
set.seed(seed)
data <- read.csv('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Apply_Workflow_To_Data/fietsdata.csv', )
data <- char_to_fac(data)
x <- data %>% select(-fietskans)
head(data)
range(x$km)
sd(x$km)
k <- 2
## @param num.trees: Number of trees used to fit the Random Forest
## @param mtry: Number of variables to possibly split at in each node
#               ---> Smaller value -> more randomness <=> Uncorrelated trees ->
## @param node.size: Minimal node size to split at. Default 1 for classification, 5 for regression
## @param max.depth: Maximal tree depth
num.trees<- 3000
mtry <- 2
node_size <- 5
k <- 2
max.depth <- NULL # Corresponds to unlimited depth
# Random Forest
rf <- ranger( formula = fietskans ~ .,
data = data,
num.trees = num.trees,
keep.inbag = T,
oob.error = T,
mtry = mtry,
max.depth = max.depth,
importance = 'permutation',
min.node.size = node_size)
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = k,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=25))
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = k,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=25))
# Summary output of variable main and low-order interaction effects
result$summary
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = 0.5,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=25))
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = 0.5,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=25))
# Summary output of variable main and low-order interaction effects
result$summary
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = 0.25,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=50))
# Summary output of variable main and low-order interaction effects
result$summary
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = 1,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=50))
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = 1,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=50))
# Summary output of variable main and low-order interaction effects
result$summary
k <- 0.25
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = k,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=50))
system.time(result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = k,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=50))
# Summary output of variable main and low-order interaction effects
result$summary
0.5*sd(x$km)
mean(x$km)
0.5*sd(x$km)
X
rm(list=ls())
library(ranger)
library(ranger)
source('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Helper_Workflow.R')
seed <- 12391
set.seed(seed)
data <- read.csv('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Apply_Workflow_To_Data/fietsdata.csv', )
data <- char_to_fac(data)
x <- data %>% select(-fietskans)
head(data)
sd(x$km)
mean(x$km)
0.25*7.215112
12.5+0.25*1.8
12.5+0.25*7.215
12.5-0.25*7.215
1e-01
1e-03
rm(list=ls())
library(ranger)
source('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Helper_Workflow.R')
seed <- 12391
set.seed(seed)
data <- read.csv('C:/Users/kpl/Thesis Project/Thesis-VariableEffects/Workflow/Apply_Workflow_To_Data/fietsdata.csv', )
data <- char_to_fac(data)
x <- data %>% select(-fietskans)
head(data)
mean(x$km)
## @param num.trees: Number of trees used to fit the Random Forest
## @param mtry: Number of variables to possibly split at in each node
#               ---> Smaller value -> more randomness <=> Uncorrelated trees ->
## @param node.size: Minimal node size to split at. Default 1 for classification, 5 for regression
## @param max.depth: Maximal tree depth
num.trees<- 4000
mtry <- 2
node_size <- 5
k <- 0.5
max.depth <- NULL # Corresponds to unlimited depth
# Random Forest
rf <- ranger( formula = fietskans ~ .,
data = data,
num.trees = num.trees,
keep.inbag = T,
oob.error = T,
mtry = mtry,
max.depth = max.depth,
importance = 'permutation',
min.node.size = node_size)
# Linear Model
linreg <- lm( formula = fietskans ~ .^2,
data = data)
summary(linreg)
result <- summary.rf(x = x,
fitted.rf = rf,
point_of_interest = 'mean_mode',
k = k,
interaction = 'all',
interaction_terms = NULL,
moving_var_effects = T,
moving_se_effects = F,
first_tree=100,
thinning=25)
x = x
fitted.rf = rf
point_of_interest = 'mean_mode'
interaction = 'all'
interaction_terms = NULL
moving_var_effects = T
moving_se_effects = F
first_tree=100
thinning=25
### Warnings
if (!is.data.frame(x)) {
stop('You must provide an object of type dataframe to argument x')
}
if (!inherits(fitted.rf$forest, "ranger.forest")) {
stop("Error: Invalid class of input object. Must provide object of type forest (RF fitted with ranger function)")
}
if (!(interaction %in% c('None', 'all', 'specific'))) {
stop('Argument "interaction" must be specified as "None", "all" or "specific"')
}
if (interaction == 'None' |interaction == 'all') {
if (!is.null(interaction_terms)) {
stop('If argument interaction is specified as "None", you must set argument interaction_terms to NULL')
}
}
if (is.character(point_of_interest)) {
if (point_of_interest == 'mean_mode') {
point_of_interest <- calculate_mean_mode(x)
} else {
stop('Argument "point_of_interest" must be either specified as "mean_mode" or as numerical vector')
}
} else if (length(point_of_interest) != ncol(x)) {
stop('if argument "point_of_interest" is specified manually you must specifiy a value of interest for each variable')
} else {
names(point_of_interest) <- names(x)
}
# Check which variables are factor variables
num.cat.idx <- sapply(x, is.factor)
if (any(apply(x[,num.cat.idx, drop=F], 2, function(c){length(unique(c))!=2}))) {
stop('For this workflow you can not provide a data set that contains factor or character variables with more than 2 levels.')
}
### Handling Ellipses
l <- list(...)
# Number of variables
n_vars <- ncol(x)
# Variable Names
x_names <- names(x)
# Convert character variables to factor variables
x <- char_to_fac(x)
# Matrix with effect estimates and corresponding SE
effect.mat <- matrix(NA, nrow = n_vars, ncol = 2)
rownames(effect.mat) <- x_names
colnames(effect.mat) <- c('Effect Estimates', 'SE')
# List with data points used for computing variable effect and corresponding variance-covariance matrix
cov_list <- vector(mode = 'list', length = n_vars)
names(cov_list) <- x_names
# List of plots for moving VAR Estimate of effects
if (moving_var_effects) {
plot_list_var <- vector(mode = 'list', length = n_vars)
names(plot_list_var) <- x_names
}
# List of plots for moving SE Estimate of effects
if (moving_se_effects) {
plot_list_se <- vector(mode = 'list', length = n_vars)
names(plot_list_se) <- x_names
}
v = 1
# New data points needed for main effect
if (num.cat.idx[v]) {
x_a <- replace(point_of_interest, v, k*unique(sort(x[,v]))[1])
x_b <- replace(point_of_interest, v, k*unique(sort(x[,v]))[2])
} else {
x_a <- replace(point_of_interest, v, point_of_interest[v]-k*sd(x[,v]))
x_b <- replace(point_of_interest, v, point_of_interest[v]+k*sd(x[,v]))
}
unique(sort(x[,v]))[1]
as.numeric(unique(sort(x[,v]))[1])
# New data points needed for main effect
if (num.cat.idx[v]) {
x_a <- replace(point_of_interest, v, k*as.numeric(unique(sort(x[,v]))[1]))
x_b <- replace(point_of_interest, v, k*as.numeric(unique(sort(x[,v]))[2]))
} else {
x_a <- replace(point_of_interest, v, point_of_interest[v]-k*sd(x[,v]))
x_b <- replace(point_of_interest, v, point_of_interest[v]+k*sd(x[,v]))
}
newdata <- data.frame(rbind(x_a, x_b))
# Predictions of Random Forest
rf.predict.obj <- RangerForestPredict(object = fitted.rf$forest,
data = newdata,
type = 'se',
se.method = 'se_direct',
inbag.counts = fitted.rf$inbag.counts)
# Estimate Main Effect
rf.predictions <- rowMeans(rf.predict.obj$predictions)
rf.effect <- (rf.predictions[2] - rf.predictions[1]) / sum(abs(as.numeric(newdata[2,])-as.numeric(newdata[1,])))
rf.effect
newdata
# New data points needed for main effect
if (num.cat.idx[v]) {
x_a <- replace(point_of_interest, v, unique(sort(x[,v]))[1])
x_b <- replace(point_of_interest, v, unique(sort(x[,v]))[2])
} else {
x_a <- replace(point_of_interest, v, point_of_interest[v]-k*sd(x[,v]))
x_b <- replace(point_of_interest, v, point_of_interest[v]+k*sd(x[,v]))
}
newdata <- data.frame(rbind(x_a, x_b))
newdata
# Predictions of Random Forest
rf.predict.obj <- RangerForestPredict(object = fitted.rf$forest,
data = newdata,
type = 'se',
se.method = 'se_direct',
inbag.counts = fitted.rf$inbag.counts)
# Estimate Main Effect
rf.predictions <- rowMeans(rf.predict.obj$predictions)
rf.effect <- (rf.predictions[2] - rf.predictions[1]) / sum(k*abs(as.numeric(newdata[2,])-as.numeric(newdata[1,])))
rf.effect
rf.effect <- (rf.predictions[2] - rf.predictions[1]) / sum(abs(as.numeric(newdata[2,])-as.numeric(newdata[1,])))
rf.effect
abs(as.numeric(newdata[2,])-as.numeric(newdata[1,]))
k
-0.0499568/2
k*sum(abs(as.numeric(newdata[2,])-as.numeric(newdata[1,])))
(rf.predictions[2] - rf.predictions[1])
rf
x
tmp <- x[1,]
tmp$geslacht
levels(tmp$geslacht)
tmp$geslacht <- levels(tmp$geslacht)[2]
tmp$geslacht
tmp <- x[1,]
tmp$geslacht <-
predict(rf, data = x)
tmp$geslacht[1] <- 1
tmp$geslacht[1] <- 'vrouw'
tmp$geslacht
tmp$geslacht[1] <- 'Vrouw'
newdata <- rbind(a, tmp)
a <- x[1,]
tmp <- a
tmp$geslacht[1] <- 'Vrouw'
newdata <- rbind(a, tmp)
newdata
predict(rf, data = x, predict.all = T, type = 'response')
predict(rf, data = x, predict.all = T, type = 'response')$predictions
rowMeans(predict(rf, data = x, predict.all = T, type = 'response')$predictions)
colMeans(predict(rf, data = x, predict.all = T, type = 'response')$predictions)
hi <- predict(rf, data = newdata, predict.all = T, type = 'response')$predictions
rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
newdata
preds[1]-preds[2]
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
preds[1]-preds[2]
i <-m 1
i <- 1
a <- x[i,]
tmp <- a
a
tmp$geslacht
levels(tmp$geslacht)
tmp$geslacht==levels(tmp$geslacht)
tmp$geslacht1=levels(tmp$geslacht)
tmp$geslacht1!=levels(tmp$geslacht)
tmp$geslacht1==levels(tmp$geslacht)
tmp$geslacht!=levels(tmp$geslacht)
levels(tmp$geslacht)[tmp$geslacht!=levels(tmp$geslacht)]
i <- 1
i <- 1
for (i in 1:900) {
a <- x[i,]
tmp <- a
tmp$geslacht[1] <- levels(tmp$geslacht)[tmp$geslacht!=levels(tmp$geslacht)]
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
print(preds[1]-preds[2])
}
i <- 1
hi <- numeric(900)
for (i in 1:900) {
a <- x[i,]
tmp <- a
tmp$geslacht[1] <- levels(tmp$geslacht)[tmp$geslacht!=levels(tmp$geslacht)]
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
hi <- preds[1]-preds[2]
}
mean(hi)
i <- 1
a <- x[i,]
tmp <- a
tmp
k
a$leeftijd[1] <- mean(x$leeftijd)-k*sd(x$leeftijd)
a
tmp <- a
tmp$leeftijd[1] <- mean(x$leeftijd)+k*sd(x$leeftijd)
newdata <- rbind(a, tmp)
newdata
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
preds
preds[2]-preds[1]
hi <- numeric(900)
for (i in 1:900) {
a <- x[i,]
tmp <- a
tmp$geslacht[1] <- levels(tmp$geslacht)[tmp$geslacht!=levels(tmp$geslacht)]
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
hi[i] <- preds[1]-preds[2]
}
for (i in 1:900) {
a <- x[i,]
tmp <- a
tmp$geslacht[1] <- levels(tmp$geslacht)[tmp$geslacht!=levels(tmp$geslacht)]
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
hi[i] <- preds[1]-preds[2]
}
mean(hi)
hi <- numeric(900)
for (i in 1:900) {
a <- x[i,]
a$leeftijd[1] <- mean(x$leeftijd)-k*sd(x$leeftijd)
tmp <- a
tmp$leeftijd[1] <- mean(x$leeftijd)+k*sd(x$leeftijd)
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
hi[i] <- preds[2]-preds[1]
}
```
mean(hi)
x$leeftijd
mean(x$leeftijd)-k*sd(x$leeftijd)
mean(x$leeftijd)+k*sd(x$leeftijd)
newdata <- rbind(a, tmp)
newdata
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
preds[2]-preds[1]
hi <- numeric(900)
for (i in 1:900) {
a <- x[i,]
a$leeftijd[1] <- mean(x$leeftijd)-k*sd(x$leeftijd)
tmp <- a
tmp$leeftijd[1] <- mean(x$leeftijd)+k*sd(x$leeftijd)
newdata <- rbind(a, tmp)
preds <- rowMeans(predict(rf, data = newdata, predict.all = T, type = 'response')$predictions)
hi[i] <- preds[2]-preds[1]
}
